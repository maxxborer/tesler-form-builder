const join = require("path").join;

const MiniCssExtractPlugin = require("mini-css-extract-plugin");

const { sassResourceItems } = require("../config");

const { isProd, rootDir, webpackDir } = require("../utils/env");

const cssLoader = {
  loader: "css-loader",
};
exports.cssLoader = cssLoader;

/**
 * Sass loader with sass-resources-loader
 */
const sassLoaderItems = [
  {
    loader: "sass-loader",
    options: {
      sourceMap: true,
      // Prefer `dart-sassRules`
      implementation: require("sass"),
    },
  },
  ...[
    !!sassResourceItems && !!sassResourceItems.length
      ? {
          loader: "sass-resources-loader",
          options: {
            resources: sassResourceItems,
          },
        }
      : false,
  ].filter(Boolean),
];
exports.sassLoaderItems = sassLoaderItems;
const postCssLoader = {
  loader: "postcss-loader",
  options: {
    postcssOptions: {
      config: join(webpackDir, "./config/postcss.js"),
    },
    sourceMap: true,
  },
};

/***
 * Using MiniCssExtractPlugin in production or style-loader in development
 * @see https://webpack.js.org/plugins/mini-css-extract-plugin/#root
 * @see https://webpack.js.org/loaders/style-loader/#root
 */
exports.postCssLoader = postCssLoader;
const miniCssExtractLoader = isProd
  ? {
      loader: MiniCssExtractPlugin.loader,
      options: {
        esModule: false,
      },
    }
  : {
      loader: "style-loader",
      options: {
        esModule: false,
      },
    };

/**
 * @see https://webpack.js.org/loaders/less-loader/#root
 */
exports.miniCssExtractLoader = miniCssExtractLoader;
const lessLoader = {
  loader: "less-loader",
  options: {
    sourceMap: true,
    lessOptions: {
      javascriptEnabled: true,
    },
  },
};

/**
 * Using to convert CSS modules from css-loader to TypeScript typings
 * @see https://github.com/TeamSupercell/typings-for-css-modules-loader
 */
exports.lessLoader = lessLoader;
const typingsCssModulesLoader = {
  loader: "@teamsupercell/typings-for-css-modules-loader",
  options: {
    banner:
      "// autogenerated by typings-for-css-modules-loader. \n// Please do not change this file!",
    formatter: "prettier",
  },
};

/**
 * @see https://webpack.js.org/loaders/sass-loader/#problems-with-url
 */
exports.typingsCssModulesLoader = typingsCssModulesLoader;
// const resolveUrlLoader = {
//   loader: "resolve-url-loader",
// options: {
//   sourceMap: true,
// },
// };
// exports.resolveUrlLoader = resolveUrlLoader;
const babelLoader = {
  loader: "babel-loader",
  options: {
    configFile: join(rootDir, "/.babelrc"),
  },
};
exports.babelLoader = babelLoader;
const cssModulesSupportLoaderItems = [
  miniCssExtractLoader,
  typingsCssModulesLoader,
  {
    ...cssLoader,
    options: {
      esModule: false,
      modules: {
        exportLocalsConvention: "camelCaseOnly",
        localIdentName: "[local]__[contenthash:base64:5]",
      },
    },
  },
];
exports.cssModulesSupportLoaderItems = cssModulesSupportLoaderItems;
const cssLoaderItems = [miniCssExtractLoader, cssLoader];
exports.cssLoaderItems = cssLoaderItems;
